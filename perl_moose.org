#+TITLE:     perl_moose.org
#+AUTHOR:    Takuya Sakakibara
#+EMAIL:     takuya@macbook-pro.local
#+DATE:      2014-03-18 Tue
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:


* 資料
*出典* https://github.com/jpa/Moose-Doc-JA

* Moose::Manual::Concepts
** メタクラス
メタクラスはクラスを説明するクラスです。
Mooseを使って定義したクラスにはすべてmeta()メソッドが用意されるのですが、このメソッドが返す Moose::Meta::ClassオブジェクトのイントロスペクションAPIを使うと、そのクラスについての情報を調べることができます。

:  my $meta = User->meta();
:
:  for my $attribute ( $meta->get_all_attributes ) {
:      print $attribute->name(), "\n";
:
:      if ( $attribute->has_type_constraint ) {
:          print "  type: ", $attribute->type_constraint->name, "\n";
:      }
:  }
:
:  for my $method ( $meta->get_all_methods ) {
:      print $method->name, "\n";
:  }

* Moose::Manual::Classes
** サブクラス化
extends 'クラス名'

多重継承するのであれば一度に指定する必要がある
extends 'クラス1', 'クラス2'

* Moose::Manual::Attributes
** アクセサメソッド
アクセサメソッドを明示する場合は、reader, writer で指定する
アトリビュートの読み取りはパブリックにしたいけれど書き込みはプライベートにしたい場合
  has 'weight' => (
      is     => 'ro',
      writer => '_set_weight',
  );
** 断定用のメソッド(predicate)とクリア用のメソッド(clearer)
 - predicate    値がセットされているかどうかを返すメソッドを定義する
                undefがセットされている場合も真を返すことに注意
 - clearer      未セットの状態にするメソッドを定義する

  has 'ssn' => (
      is        => 'rw',
      clearer   => 'clear_ssn',
      predicate => 'has_ssn',
  );
** 必須かどうか (required) 
コンストラクタでアトリビュートを指定する必要があることを示す(undefでもよい)。
コンストラクタの後、クリア用のメソッドで未セットの状態にすることも可能

** デフォルト値とビルダーメソッド (default, builder)
*** default

  has 'size' => (
      is        => 'ro',
      default   => 'medium',
      predicate => 'has_size',
  );

 (サブルーチンのリファレンスを渡す場合)
  has 'size' => (
      is => 'ro',
      default =>
          sub { ( 'small', 'medium', 'large' )[ int( rand 3 ) ] },
      predicate => 'has_size',
  );

デフォルト値に何らかのリファレンスを渡したい場合は、サブルーチンの返り値として渡す必要がある
  has 'mapping' => (
      is      => 'ro',
      default => {},  # wrong!

      default => sub { {} }, # right!
  );

*** builder
  has 'size' => (
      is        => 'ro',
      builder   => '_build_size',
      predicate => 'has_size',
  );
  sub _build_size {
      return ( 'small', 'medium', 'large' )[ int( rand 3 ) ];
  }

 ビルダーはロールから合成することもできます

*** ロールの方でアトリビュートを提供して、builder は取り込む側のクラスで実装する例
 package HasSize;
 use Moose::Role;
 requires '_build_size';

 has 'size' => (
     is      => 'ro',
     lazy    => 1,
     builder => '_build_size',
 );

 package Lilliputian;
 use Moose;
 with 'HasSize';
 sub _build_size { return 'small' }    # builderメソッドの実装

** 遅延評価とlazy_build
lazy が真の場合、デフォルト値が生成されるのはオブジェクト生成時ではなく、はじめて読み取り用のメソッドが呼ばれたときになる。
 デフォルト値が他のアトリビュートに依存する場合は lazy の指定を行う必要がある

*** lazy_build
 has 'size' => (
     is         => 'ro',
     lazy_build => 1,
 );

 これは、以下のすべてのオプションを指定するのと同じ('_builder_size', 'clear_size', 'has_size'というメソッド名は自動的に決められる)
 has 'size' => (
     is        => 'ro',
     lazy      => 1,
     builder   => '_build_size',
     clearer   => 'clear_size',
     predicate => 'has_size',　_
 );

** コンストラクタのパラメータ (init_arg)

コンストラクタのパラメータ名に別の名前を使いたいとか、
コンストラクタ経由ではアトリビュートに値をセットできないようにする


  has 'bigness' => (
      is       => 'ro',
      init_arg => 'size',　  # コンストラクタに渡すときには size という名前を使う
  );

  has '_genetic_code' => (
      is         => 'ro',
      lazy_build => 1,
      init_arg   => undef,   # コンストラクタ経由ではアトリビュートに値をセットできないようにする(これはプライベートなアトリビュートの場合、特に便利です)
  );

** トリガ (trigger)
アトリビュートに値がセットされたとき(後)に呼ばれるサブルーチンを定義する

  has 'size' => (
      is      => 'rw',
      trigger => \&size_set,
  );

  sub size_set {
      my ( $self, $size, $old_size ) = @_;    # 新しい値と古い値を引数として呼び出される
      ...
  }

もしアトリビュートの値がその前に一回も設定されていない場合は、新しい値のみが渡される
※この特性を利用することにより、アトリビュートが新規に値を設定された時と、前の値がundefだった場合の違いを認識することができます。

※ after メソッドモディファイアとの違い
  - trigger の方は、アクセサメソッドが呼ばれたときかならず（読み込んだときも書き込んだときも）呼ばれるのではなく、
    アトリビュートに値がセットされたときだけ呼ばれる。(アトリビュートの値がコンストラクタに渡されたときにも呼ばれる)
  - trigger は default や builder で値が初期化されたときには呼ばれない。

** アトリビュートの型 (isa, does)

 has 'first_name' => (
     is  => 'ro',
     isa => 'Str',    # 文字列を指定
 );

 has 'weapon' => (
     is   => 'rw',
     does => 'MyApp::Weapon',    # 特定のロールを持つオブジェクトを指定
 );

** 委譲 (handles)

  has 'hair_color' => (
      is      => 'ro',
      isa     => 'Graphics::Color::RGB',
      handles => { hair_color_hex => 'as_hex_string' },
  );

hair_color_hex が呼び出されると、内部的には as_hex_string を呼び出す

** メタクラスとトレート (metaclass, traits)

  has 'mapping' => (
      metaclass => 'Hash',
      is        => 'ro',
      default   => sub { {} },
  );

上記の Hash というメタクラスは、実際には Moose::Meta::Attribute::Native::Trait::Hash を指す

※その他のネイティブトレート
 - Number  : Moose::Meta::Attribute::Native::Trait::Number
 - Counter : Moose::Meta::Attribute::Native::Trait::Counter
 - String  : Moose::Meta::Attribute::Native::Trait::String
 - Bool    : Moose::Meta::Attribute::Native::Trait::Bool
 - Array   : Moose::Meta::Attribute::Native::Trait::Array

** アトリビュートの継承
オーバーライド

  has '+first_name' => (
      lazy    => 1,
      default => 'Bill',
  );

** 複数アトリビュート定義時のショートカット
名前以外の定義が同じアトリビュートを複数定義する場合は、それらを一度に定義することができる

  has [ 'x', 'y' ] => ( is => 'ro', isa => 'Int' );

* Moose::Manual::Delegation
** マッピングを指定する
*** 1) メソッドのリストを指定

  package Website;
  use Moose;

  has 'uri' => (
      is      => 'ro',
      isa     => 'URI',
      handles => [qw( host path )],
  );

 $website->hostを呼びば、 $website->uri->hostが呼ばれる


*** 2) HashRefでメソッドをマッピング
  has 'uri' => (
      is      => 'ro',
      isa     => 'URI',
      handles => {
          hostname => 'host',
          path     => 'path',
      },
  );

 $website->hostname を呼びば、 $website->uri->hostが呼ばれる


*** 3) ロールを指定

  has 'uri' => (
      is      => 'ro',
      isa     => 'URI',
      handles => 'HasURI',
  );

 ロールの定義するそれぞれのメソッドをマッピング


** Perl構造体
MooseX::AttributeHelpers と同様な機能
　※ MooseX::AttributeHelpers は deprecatedな扱いになっているのでこちらを使うことが推奨

  has 'queue' => (
      isa     => 'ArrayRef[Item]',
      traits  => ['Array'],
      default => sub { [ ] },
      handles => {
          add_item  => 'push',
          next_item => 'shift',
      },
  );

  Arrayトレートを traitsに指定することにより、MooseにArrayにまつわるヘルパーを
  使用したいということを伝える。
  handles で add_item に pushを next_item に shiftをマッピング。

*** その他のトレート
Array, Hash, Bool, String, Number, Counter など
詳細は Moose::Meta::Attribute::Native


** カリー化 (TBD)

  *TBD*

* Moose::Manual::Construction

** BUILDARGS
newの前に呼ばれる。

e.g.) newに hash, hashref ではなく単純な値を引数に渡す

  around BUILDARGS => sub {
      my $orig = shift;    # オリジナルのメソッド(親クラス(Moose::Object)の BUILDARGS)
      my $class = shift;   # クラス名
  
      if ( @_ == 1 && ! ref $_[0] ) {      # 残りの引数の数が1 かつリファレンスでない場合、この場でハッシュを作成する
          return $class->$orig( ssn => $_[0] );
      }
      else {                               # それ以外の場合はそのまま引数を渡して通常通り処理する
          return $class->$orig(@_);
      }
  };

  $class->$orig() でクラスTの親クラスのBUILDARGSを呼ぶ
  これはhashとhashrefを区別してくれる

** BUILD
newの後、オブジェクトが生成された後に呼ばれる
例えばオブジェクトの状態をチェックしたりすることに用いる

  sub BUILD {
      my $self = shift;

      if ( $self->........ eq '....' ) {
          die '.............'
              unless $self->......;
      }
  }

** BUILDと親クラス
Mooseはクラス階層にある全てのBUILDメソッドを _親から子の順番で_ 呼ぶ

** オブジェクトの破棄 (DEMOLISH)
オブジェクトを破棄するときに呼ばれる

* Moose::Manual::MethodModifiers

** メソッドモディファイアとは

before 'foo' => sub {.....};
after 'foo' => sub {.....};
around 'foo' => sub {
    my $orig = shift;
    my $self = shift;
    ..................
    $self->$orig(@_);    # foo()を呼ぶ（これを行わないと foo()は呼ばれない）
    ..................
};

同種のモディファイアを複数定義した場合は最後に追加されたものから実行される。
メソッドモディファイアはいずれもPerlの関数として実装されているので、モディファイアの宣言はかならずセミコロンで終えなければなりません。


** before、after、around
使用例
- ロールで定義したメソッドの振る舞いを、実装したクラスで変更する
- 振る舞いを追加する
- 事前チェックを行う (before)
- 実行結果のログを取る (after)
- 引数を変更、'呼ばない' 選択を取る、返り値を変更　(around)

** inner と argument

実装の一部をサブクラスで行うようにする
 package S;
 use Moose;
 
 sub foo {
     print "S foo -1\n";
     inner();
     print "S foo -2\n";
 }
 
 package C;
 use Moose; extends 'S';
 
 augment 'foo' => sub {
     print "C foo\n";
 };
 
 package main;
 
 my $c = C->new();
 $c->foo();    <<<<<<<<< 親クラスのfooから順次呼ばれる

 -------------
  実行結果
  S foo -1
  C foo
  S foo -2

** overrideとsuper

  override 'display_name' => sub {
      my $self = shift;

      return super() . q{, } . $self->title();
  };
  super()にはメソッドモディファイアと同じ引数が渡される。(明示しても無視される)

* Moose::Manual::Roles
** ロールとは
- ロールは継承やインスタンス化はできない。
- ロールで定義されたアトリビュートやメソッドは取り込んだクラスに追加される（フラット化）
- ロールを取り込んだクラスのサブクラスはロールで定義されたメソッドやアトリビュートも継承される

package RRR;
use Moose::Role;

has 'xxx' =>(...);
sub yyy { ... }

package CCC;
use Moose;
with 'RRR';    # <<<<
 ...

** 必須メソッド (requires)

package HHH;
use Moose::Role;
requires 'break';

** メソッドの衝突
クラスに複数のロールを合成するとき、複数のロールに同名のメソッドがあると衝突が起こる。
この場合、合成しようとしているクラスが同名のメソッドを「自分で」提供しなければなりません。

** メソッドの排除と別名

  with 'Breakable' => {
      alias   => { break => 'break_bone' },
      exclude => 'break',
      },
      'Breakdancer' => {
      alias   => { break => 'break_dance' },
      exclude => 'break',
      };

   *ただしこのPODのサンプルはうまく動作せず以下のエラーが発生する*
    : Due to a method name conflict in roles 'Breakable' and 'Breakdancer', 
    : the method 'break' must be implemented or excluded by 'FragileDancer' 


** ロールの排除
ロールは、合成できないロールを指定することもできます。これはロールの再利用性を制限するのでよく気をつけて利用してください。

  package Breakable;
  use Moose::Role;
  excludes 'BreakDancer';
* Moose::Manual::Types
** 型
  Any
  Item
      Bool
      Maybe[`a]
      Undef
      Defined
          Value
              Num
                Int
              Str
                ClassName
                RoleName
          Ref
              ScalarRef
              ArrayRef[`a]
              HashRef[`a]
              CodeRef
              RegexpRef
              GlobRef
                FileHandle
              Object
                Role

Mooseを使って作ったクラスは型名として利用できる

** サブタイプ
  Moose::Util::TypeConstraints
  subtype 'PositiveInt'
      => as 'Int'
      => where { $_ > 0 }
      => message { "The number you provided, $_, was not a positive number" };

subtype で定義した型はグローバルに展開されるため他のクラスからも使用可能となる

** 型変換　(coerce)
  subtype 'ArrayRefOfInts'
      => as 'ArrayRef[Int]';
  
  coerce 'ArrayRefOfInts'
      => from 'Int'
      => via { [ $_ ] };
  
  has 'snum' =>(is => 'rw',
                isa => 'ArrayRefOfInts',
                coerce => 1,              # 型変換を指示
  );


** 再帰的な型変換
(省略)

** 型結合
複数の異なる型になれるアトリビュートを定義することができる

  has 'output' => (
      is  => 'rw',
      isa => 'Object | FileHandle',
  );

** 型を生成するためのヘルパー関数
Moose::Util::TypeConstraints モジュールは、特定の種類の型を生成するためのヘルパー関数を多数エクスポートする
*** class_type
 https://github.com/jpa/Moose-Doc-JA/blob/master/Moose/Cookbook/Basics/Recipe5.pod
以下のショートカット

  subtype 'HTTP::Headers'
      => as 'Object'
      => where { $_->isa('HTTP::Headers') };

Mooseを使っているクラスはすべて内部的に型制約が生成されますが、Mooseを使っていないクラスについては明示的に型を宣言しなければなりません。

ex)
  subtype 'My::Types::HTTP::Headers' => as class_type('HTTP::Headers');


*** role_type

*** maybe_type

- enum
  指定した値しか許さない Str型のサブタイプを生成できる
  enum 'RGB' => qw( red green blue );

** 無名の型

型を生成する関数はすべて型オブジェクトを返します。
この型オブジェクトは、親の型や、アトリビュートの isa オプションの値のように、型の名前を使える場所ならどこででも使えます。

  has 'size' => (
      is => 'ro',
      isa => subtype 'Int' => where { $_ > 0 },
  );

これは、その場限りの型を作る（グローバルな名前空間レジストリを「汚染」したくない）ときに便利です。
* Moose::Manual::MOP
Class::MOP  クラス、アトリビュート、メソッドなどのイントロスペクションを行うためのAPI

メタクラスオブジェクト(Moose::Meta::Class)の取得
T2->meta;    # クラス->meta
T2->$meta;   # オブジェクト->meta
Class::MOP::Class->initialize('T2')    # 作成済みのメタクラスがあればそれを返し、無ければ新しい Class::MOP::Classオブジェクトを返す

** メタクラスオブジェクトを使う
- アトリビュートの一覧
  for my $attr ( $meta->get_all_attributes ) {
      print $attr->name, "\n";
  }

- メソッドのリスト
  for my $method ( $meta->get_all_methods ) {
      print $method->fully_qualified_name, "\n";
  }

- クラスの親クラス, サブクラス
  for my $class ( $meta->linearized_isa ) {
      print "$class\n";
  }

  for my $subclass ( $meta->subclasses ) {
      print "$subclass\n";
  }

** MOPを使ってクラスを変更する

- メソッドを追加
  $meta->add_method( 'say' => sub { print @_, "\n" } );

- アトリビュートを追加
  $meta->add_attribute(
      name => 'size',
      is   => 'rw',
      isa  => 'Int',
  );

* Moose::Manual::MooseX
** MooseX::StrictConstructor

コンストラクタが認識できない引数があったときはエラーが発生するようになる
  package User;
  use Moose;
  use MooseX::StrictConstructor;
  has 'name';
  has 'email';
  User->new( name => 'Bob', emali => 'bob@example.com' );
                            ~~~~~~~
** MooseX::Getopt
new_with_options というメソッドをクラスに追加するロール
これはコマンドラインオプションを受け取ってアトリビュートに値を入れてくれるコンストラクタです。

これを使うとコマンドラインアプリケーション用のモジュールを書くのが非常に簡単になります。

  package App::Foo;
  use Moose;  with 'MooseX::Getopt';

  has 'input' => (
      is       => 'ro',
      isa      => 'Str',
      required => 1
  );

  has 'output' => (
      is       => 'ro',
      isa      => 'Str',
      required => 1
  );

  sub run { ... }

実行したいスクリプトの方にはこう書いておきます。

  use App::Foo;

  my $foo = App::Foo->new_with_options;
  $foo->run;

これで、コマンドラインからこんな風にスクリプトを実行できるようになります。
  $ foo --input /path/to/input --output /path/to/output
** MooseX::Singleton
  package Config;
  use MooseX::Singleton; # instead of Moose

  ----------
  my $conf1 = Config->instance();
  my $conf2 = Config->instance();    # $conf1と同じオブジェクトが返る


* Moose::Cookbook::Basics
** Recipe6
__PACKAGE__->meta->make_immutable;

