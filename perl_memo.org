#+TITLE:     perl_memo.org
#+AUTHOR:    
#+EMAIL:     22709546@JPTOW709546A
#+DATE:      2013-04-12 金
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:t
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:


* Moose
https://github.com/jpa/Moose-Doc-JA

** Manual::Concepts
*** メタクラス
メタクラスはクラスを説明するクラスです。
Mooseを使って定義したクラスにはすべてmeta()メソッドが用意されるのですが、このメソッドが返す Moose::Meta::ClassオブジェクトのイントロスペクションAPIを使うと、そのクラスについての情報を調べることができます。

:  my $meta = User->meta();
:
:  for my $attribute ( $meta->get_all_attributes ) {
:      print $attribute->name(), "\n";
:
:      if ( $attribute->has_type_constraint ) {
:          print "  type: ", $attribute->type_constraint->name, "\n";
:      }
:  }
:
:  for my $method ( $meta->get_all_methods ) {
:      print $method->name, "\n";
:  }

** Manual::Classes
*** サブクラス化
extends 'クラス名'

多重継承するのであれば一度に指定する必要がある
extends 'クラス1', 'クラス2'


** Manual::Attributes
*** アクセサメソッド
アクセサメソッドを明示する場合は、reader, writer で指定する
アトリビュートの読み取りはパブリックにしたいけれど書き込みはプライベートにしたい場合
  has 'weight' => (
      is     => 'ro',
      writer => '_set_weight',
  );
*** 断定用のメソッド(predicate)とクリア用のメソッド(clearer)
 - predicate    値がセットされているかどうかを返すメソッドを定義する
                undefがセットされている場合も真を返すことに注意
 - clearer      未セットの状態にするメソッドを定義する

  has 'ssn' => (
      is        => 'rw',
      clearer   => 'clear_ssn',
      predicate => 'has_ssn',
  );
*** 必須かどうか (required) 
コンストラクタでアトリビュートを指定する必要があることを示す(undefでもよい)。
コンストラクタの後、クリア用のメソッドで未セットの状態にすることも可能

*** デフォルト値とビルダーメソッド (default, builder)
**** default

  has 'size' => (
      is        => 'ro',
      default   => 'medium',
      predicate => 'has_size',
  );

 (サブルーチンのリファレンスを渡す場合)
  has 'size' => (
      is => 'ro',
      default =>
          sub { ( 'small', 'medium', 'large' )[ int( rand 3 ) ] },
      predicate => 'has_size',
  );

デフォルト値に何らかのリファレンスを渡したい場合は、サブルーチンの返り値として渡す必要がある
  has 'mapping' => (
      is      => 'ro',
      default => {},  # wrong!

      default => sub { {} }, # right!
  );

**** builder
  has 'size' => (
      is        => 'ro',
      builder   => '_build_size',
      predicate => 'has_size',
  );
  sub _build_size {
      return ( 'small', 'medium', 'large' )[ int( rand 3 ) ];
  }

 ビルダーはロールから合成することもできます

**** ロールの方でアトリビュートを提供して、builder は取り込む側のクラスで実装する例
  package HasSize;
  use Moose::Role;
  requires '_build_size';

  has 'size' => (
      is      => 'ro',
      lazy    => 1,
      builder => '_build_size',
  );

  package Lilliputian;
  use Moose;
  with 'HasSize';
  sub _build_size { return 'small' }    # builderメソッドの実装

*** 遅延評価とlazy_build
lazy が真の場合、デフォルト値が生成されるのはオブジェクト生成時ではなく、はじめて読み取り用のメソッドが呼ばれたときになる。
 デフォルト値が他のアトリビュートに依存する場合は lazy の指定を行う必要がある

**** lazy_build
  has 'size' => (
      is         => 'ro',
      lazy_build => 1,
  );

  これは、以下のすべてのオプションを指定するのと同じ('_builder_size', 'clear_size', 'has_size'というメソッド名は自動的に決められる)
  has 'size' => (
      is        => 'ro',
      lazy      => 1,
      builder   => '_build_size',
      clearer   => 'clear_size',
      predicate => 'has_size',　_
  );

*** コンストラクタのパラメータ (init_arg)

コンストラクタのパラメータ名に別の名前を使いたいとか、
コンストラクタ経由ではアトリビュートに値をセットできないようにする


  has 'bigness' => (
      is       => 'ro',
      init_arg => 'size',　  # コンストラクタに渡すときには size という名前を使う
  );

  has '_genetic_code' => (
      is         => 'ro',
      lazy_build => 1,
      init_arg   => undef,   # コンストラクタ経由ではアトリビュートに値をセットできないようにする(これはプライベートなアトリビュートの場合、特に便利です)
  );

*** トリガ (trigger)
アトリビュートに値がセットされたとき(後)に呼ばれるサブルーチンを定義する

  has 'size' => (
      is      => 'rw',
      trigger => \&size_set,
  );

  sub size_set {
      my ( $self, $size, $old_size ) = @_;    # 新しい値と古い値を引数として呼び出される
      ...
  }

もしアトリビュートの値がその前に一回も設定されていない場合は、新しい値のみが渡される
※この特性を利用することにより、アトリビュートが新規に値を設定された時と、前の値がundefだった場合の違いを認識することができます。

※ after メソッドモディファイアとの違い
  - トリガの方は、アクセサメソッドが呼ばれたときかならず（読み込んだときも書き込んだときも）呼ばれるのではなく、
    アトリビュートに値がセットされたときだけ呼ばれる。(アトリビュートの値がコンストラクタに渡されたときにも呼ばれる)
  - トリガは default や builder で値が初期化されたときには呼ばれない。

*** アトリビュートの型 (isa, does)

  has 'first_name' => (
      is  => 'ro',
      isa => 'Str',    # 文字列を指定
  );

  has 'weapon' => (
      is   => 'rw',
      does => 'MyApp::Weapon',    # 特定のロールを持つオブジェクトを指定
  );

*** 委譲 (handles)
_TBD_

*** メタクラスとトレート (metaclass, traits)

  has 'mapping' => (
      metaclass => 'Hash',
      is        => 'ro',
      default   => sub { {} },
  );

上記の Hash というメタクラスは、実際には Moose::Meta::Attribute::Native::Trait::Hash を指す

※その他のネイティブトレート
 - Number  : Moose::Meta::Attribute::Native::Trait::Number
 - Counter : Moose::Meta::Attribute::Native::Trait::Counter
 - String  : Moose::Meta::Attribute::Native::Trait::String
 - Bool    : Moose::Meta::Attribute::Native::Trait::Bool
 - Array   : Moose::Meta::Attribute::Native::Trait::Array

*** アトリビュートの継承
オーバーライド

  has '+first_name' => (
      lazy    => 1,
      default => 'Bill',
  );

*** 複数アトリビュート定義時のショートカット
名前以外の定義が同じアトリビュートを複数定義する場合は、それらを一度に定義することができる

  has [ 'x', 'y' ] => ( is => 'ro', isa => 'Int' );


* プロトタイプ
 $    対応する引数一つをとる意味
 @    以降にリストを要求する意味
 &    対応する引数一つに、サブルーチンを要求する意味
 \@   対応する引数一つに、配列変数を要求する意味
 ;    これ以降の引数は省略可能という意味


 呼び出し時にサブルーチン名の先頭に & を付けるとプロトタイプのチェックがされなくなる

** サブルーチンへリファレンスを渡す記述の違い

プロトタイプを使わない場合        プロトタイプを使う場合

:  sub aaa {                      sub aaa(\@) {                  <<<<<<<<<<<<
:      my $ref_array = shift;         my $ref_array = shift;   
:  }                              }                            
:                               
:  my @ary = qw(1 2 3);           my @ary = qw(1 2 3);         
:  aaa(\@ary);                    aaa(@ary);                     <<<<<<<<<<<<
:                               

 参考：http://www7.atwiki.jp/perlmemo/?cmd=word&word=perl%20%E3%83%97%E3%83%AD%E3%83%88%E3%82%BF%E3%82%A4%E3%83%97&type=normal&page=%E3%83%97%E3%83%AD%E3%83%88%E3%82%BF%E3%82%A4%E3%83%97                                 

* 単独の実行ファイルの作成 (App::FatPacker)
http://perltricks.com/article/58/2014/1/5/The-easy-way-to-build-stand-alone-Perl-apps
